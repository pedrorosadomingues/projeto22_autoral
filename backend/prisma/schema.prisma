generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Classtime {
  id      Int       @id @default(autoincrement())
  hour    String    @unique @db.VarChar(255)
  Student Student[]
}

model Weekday {
  id      Int       @id @default(autoincrement())
  name    String    @unique @db.VarChar(255)
  Student Student[]
}

model FinishedUnit {
  id        Int     @id @default(autoincrement())
  unitId    Int
  studentId Int
  Student   Student @relation(fields: [studentId], references: [id])
  Unit      Unit    @relation(fields: [unitId], references: [id])
}

model Nivel {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(255)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  Student   Student[]
  Unit      Unit[]
}

model Observation {
  id          Int     @id @default(autoincrement())
  description String  @db.VarChar(255)
  studentId   Int
  userId      Int
  Student     Student @relation(fields: [studentId], references: [id])
  User        User    @relation(fields: [userId], references: [id])
}

model Student {
  id           Int            @id @default(autoincrement()) @unique
  name         String         @db.VarChar(255)
  age          Int 
  cpf          String         @unique @db.VarChar(255)
  userId       Int            
  nivelId      Int
  classTimeId  Int
  weekdayId    Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  User         User           @relation(fields: [userId], references: [id])
  Weekday      Weekday       @relation(fields: [weekdayId], references: [id])
  Classtime    Classtime      @relation(fields: [classTimeId], references: [id])
  Nivel        Nivel          @relation(fields: [nivelId], references: [id])
  FinishedUnit FinishedUnit[]
  Observation  Observation[]
}

model Unit {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  nivelId      Int
  Nivel        Nivel          @relation(fields: [nivelId], references: [id])
  FinishedUnit FinishedUnit[]
}

model User {
  id        Int               @id @default(autoincrement())
  name      String            @db.VarChar(255)
  email     String            @unique @db.VarChar(255)
  password  String            @db.VarChar(255)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  Student   Student[]
  Session   Session[]
  Observation  Observation[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int       @unique
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}