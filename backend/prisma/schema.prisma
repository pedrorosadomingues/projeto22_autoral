generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Classtime {
  id               Int                @id @default(autoincrement())
  hour             DateTime           @db.Date
  dayweek          String             @db.VarChar(255)
  ClasstimeStudent ClasstimeStudent[]
}

model ClasstimeStudent {
  id          Int       @id @default(autoincrement())
  classtimeid Int
  studentid   Int
  Classtime   Classtime @relation(fields: [classtimeid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Student     Student   @relation(fields: [studentid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model FinishedUnit {
  id        Int     @id @default(autoincrement())
  unitid    Int
  studentid Int
  Student   Student @relation(fields: [studentid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Unit      Unit    @relation(fields: [unitid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Nivel {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  createdat DateTime? @db.Date
  updatedat DateTime? @db.Date
  Student   Student[]
  Unit      Unit[]
}

model Observation {
  id          Int     @id @default(autoincrement())
  description String  @db.VarChar(255)
  studentid   Int
  Student     Student @relation(fields: [studentid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Student {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  age              Int
  nivelid          Int
  observation      String?            @db.VarChar(255)
  createdat        DateTime?          @db.Date
  updatedat        DateTime?          @db.Date
  Nivel            Nivel              @relation(fields: [nivelid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ClasstimeStudent ClasstimeStudent[]
  FinishedUnit     FinishedUnit[]
  Observation      Observation[]
  Unit             Unit[]
  UserStudent      UserStudent[]
}

model Unit {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  nivelid      Int
  studentid    Int
  Nivel        Nivel          @relation(fields: [nivelid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Student      Student        @relation(fields: [studentid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  FinishedUnit FinishedUnit[]
}

model User {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  email       String        @db.VarChar(255) @unique
  password    String        @db.VarChar(255)
  createdat   DateTime?     @db.Date
  updatedat   DateTime?     @db.Date
  UserStudent UserStudent[]
}

model UserStudent {
  id        Int     @id @default(autoincrement())
  userid    Int
  studentid Int
  Student   Student @relation(fields: [studentid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User      User    @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
